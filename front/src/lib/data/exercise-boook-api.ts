/**
 * Generated by orval v6.8.1 üç∫
 * Do not edit manually.
 * ExerciseBook
 * Api for exercise book app
 * OpenAPI spec version: 3.0
 */
import axios, { AxiosRequestConfig, AxiosResponse, AxiosError } from 'axios';
import {
  useQuery,
  useMutation,
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from 'react-query';
export type GetExerciseParams = { limit?: number; page?: number };

export interface User {
  [key: string]: any;
}

export interface CreateUserDto {
  /** User Full name */
  name: string;
}

export interface Exercise {
  id: string;
  user_id: string;
  content: string;
  created_at: string;
}

export interface CreateExerciseDto {
  /** user uuid */
  user_id: string;
  /** Exercise content */
  content: string;
}

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

export const healthcheckApp = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.get(`/utils/healthcheck`, options);
};

export const getHealthcheckAppQueryKey = () => [`/utils/healthcheck`];

export type HealthcheckAppQueryResult = NonNullable<
  Awaited<ReturnType<typeof healthcheckApp>>
>;
export type HealthcheckAppQueryError = AxiosError<unknown>;

export const useHealthcheckApp = <
  TData = Awaited<ReturnType<typeof healthcheckApp>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof healthcheckApp>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getHealthcheckAppQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof healthcheckApp>>> = ({
    signal,
  }) => healthcheckApp({ signal, ...axiosOptions });

  const query = useQuery<
    Awaited<ReturnType<typeof healthcheckApp>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions);

  return {
    queryKey,
    ...query,
  };
};

export const getExercise = (
  params?: GetExerciseParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.get(`/exercises`, {
    params,
    ...options,
  });
};

export const getGetExerciseQueryKey = (params?: GetExerciseParams) => [
  `/exercises`,
  ...(params ? [params] : []),
];

export type GetExerciseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getExercise>>
>;
export type GetExerciseQueryError = AxiosError<unknown>;

export const useGetExercise = <
  TData = Awaited<ReturnType<typeof getExercise>>,
  TError = AxiosError<unknown>,
>(
  params?: GetExerciseParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getExercise>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetExerciseQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getExercise>>> = ({
    signal,
  }) => getExercise(params, { signal, ...axiosOptions });

  const query = useQuery<
    Awaited<ReturnType<typeof getExercise>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions);

  return {
    queryKey,
    ...query,
  };
};

export const createExercise = (
  createExerciseDto: CreateExerciseDto,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Exercise>> => {
  return axios.post(`/exercises/create`, createExerciseDto, options);
};

export type CreateExerciseMutationResult = NonNullable<
  Awaited<ReturnType<typeof createExercise>>
>;
export type CreateExerciseMutationBody = CreateExerciseDto;
export type CreateExerciseMutationError = AxiosError<unknown>;

export const useCreateExercise = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createExercise>>,
    TError,
    { data: CreateExerciseDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createExercise>>,
    { data: CreateExerciseDto }
  > = (props) => {
    const { data } = props ?? {};

    return createExercise(data, axiosOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof createExercise>>,
    TError,
    { data: CreateExerciseDto },
    TContext
  >(mutationFn, mutationOptions);
};

export const getUsers = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.get(`/users`, options);
};

export const getGetUsersQueryKey = () => [`/users`];

export type GetUsersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUsers>>
>;
export type GetUsersQueryError = AxiosError<unknown>;

export const useGetUsers = <
  TData = Awaited<ReturnType<typeof getUsers>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData>;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUsersQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsers>>> = ({
    signal,
  }) => getUsers({ signal, ...axiosOptions });

  const query = useQuery<Awaited<ReturnType<typeof getUsers>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  );

  return {
    queryKey,
    ...query,
  };
};

export const createUsers = (
  createUserDto: CreateUserDto,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<User>> => {
  return axios.post(`/users/create`, createUserDto, options);
};

export type CreateUsersMutationResult = NonNullable<
  Awaited<ReturnType<typeof createUsers>>
>;
export type CreateUsersMutationBody = CreateUserDto;
export type CreateUsersMutationError = AxiosError<void>;

export const useCreateUsers = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createUsers>>,
    TError,
    { data: CreateUserDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createUsers>>,
    { data: CreateUserDto }
  > = (props) => {
    const { data } = props ?? {};

    return createUsers(data, axiosOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof createUsers>>,
    TError,
    { data: CreateUserDto },
    TContext
  >(mutationFn, mutationOptions);
};
